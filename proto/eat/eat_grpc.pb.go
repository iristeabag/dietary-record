// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: eat.proto

package eat

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EatService_GetEatById_FullMethodName = "/eat.EatService/GetEatById"
	EatService_GetEats_FullMethodName    = "/eat.EatService/GetEats"
	EatService_CreateEat_FullMethodName  = "/eat.EatService/CreateEat"
	EatService_UpdateEat_FullMethodName  = "/eat.EatService/UpdateEat"
	EatService_DeleteEat_FullMethodName  = "/eat.EatService/DeleteEat"
)

// EatServiceClient is the client API for EatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EatServiceClient interface {
	GetEatById(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*GetEatByIdResponse, error)
	GetEats(ctx context.Context, in *GetEatsRequest, opts ...grpc.CallOption) (*GetEatsResponse, error)
	CreateEat(ctx context.Context, in *EatRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	UpdateEat(ctx context.Context, in *EatRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	DeleteEat(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
}

type eatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEatServiceClient(cc grpc.ClientConnInterface) EatServiceClient {
	return &eatServiceClient{cc}
}

func (c *eatServiceClient) GetEatById(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*GetEatByIdResponse, error) {
	out := new(GetEatByIdResponse)
	err := c.cc.Invoke(ctx, EatService_GetEatById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatServiceClient) GetEats(ctx context.Context, in *GetEatsRequest, opts ...grpc.CallOption) (*GetEatsResponse, error) {
	out := new(GetEatsResponse)
	err := c.cc.Invoke(ctx, EatService_GetEats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatServiceClient) CreateEat(ctx context.Context, in *EatRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, EatService_CreateEat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatServiceClient) UpdateEat(ctx context.Context, in *EatRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, EatService_UpdateEat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatServiceClient) DeleteEat(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, EatService_DeleteEat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EatServiceServer is the server API for EatService service.
// All implementations must embed UnimplementedEatServiceServer
// for forward compatibility
type EatServiceServer interface {
	GetEatById(context.Context, *GetByIdRequest) (*GetEatByIdResponse, error)
	GetEats(context.Context, *GetEatsRequest) (*GetEatsResponse, error)
	CreateEat(context.Context, *EatRequest) (*DefaultResponse, error)
	UpdateEat(context.Context, *EatRequest) (*DefaultResponse, error)
	DeleteEat(context.Context, *GetByIdRequest) (*DefaultResponse, error)
	// mustEmbedUnimplementedEatServiceServer()
}

// UnimplementedEatServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEatServiceServer struct {
}

func (UnimplementedEatServiceServer) GetEatById(context.Context, *GetByIdRequest) (*GetEatByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEatById not implemented")
}
func (UnimplementedEatServiceServer) GetEats(context.Context, *GetEatsRequest) (*GetEatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEats not implemented")
}
func (UnimplementedEatServiceServer) CreateEat(context.Context, *EatRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEat not implemented")
}
func (UnimplementedEatServiceServer) UpdateEat(context.Context, *EatRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEat not implemented")
}
func (UnimplementedEatServiceServer) DeleteEat(context.Context, *GetByIdRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEat not implemented")
}

// func (UnimplementedEatServiceServer) mustEmbedUnimplementedEatServiceServer() {}

// UnsafeEatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EatServiceServer will
// result in compilation errors.
type UnsafeEatServiceServer interface {
	// mustEmbedUnimplementedEatServiceServer()
}

func RegisterEatServiceServer(s grpc.ServiceRegistrar, srv EatServiceServer) {
	s.RegisterService(&EatService_ServiceDesc, srv)
}

func _EatService_GetEatById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatServiceServer).GetEatById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatService_GetEatById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatServiceServer).GetEatById(ctx, req.(*GetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatService_GetEats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatServiceServer).GetEats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatService_GetEats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatServiceServer).GetEats(ctx, req.(*GetEatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatService_CreateEat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatServiceServer).CreateEat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatService_CreateEat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatServiceServer).CreateEat(ctx, req.(*EatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatService_UpdateEat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatServiceServer).UpdateEat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatService_UpdateEat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatServiceServer).UpdateEat(ctx, req.(*EatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatService_DeleteEat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatServiceServer).DeleteEat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatService_DeleteEat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatServiceServer).DeleteEat(ctx, req.(*GetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EatService_ServiceDesc is the grpc.ServiceDesc for EatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eat.EatService",
	HandlerType: (*EatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEatById",
			Handler:    _EatService_GetEatById_Handler,
		},
		{
			MethodName: "GetEats",
			Handler:    _EatService_GetEats_Handler,
		},
		{
			MethodName: "CreateEat",
			Handler:    _EatService_CreateEat_Handler,
		},
		{
			MethodName: "UpdateEat",
			Handler:    _EatService_UpdateEat_Handler,
		},
		{
			MethodName: "DeleteEat",
			Handler:    _EatService_DeleteEat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eat.proto",
}
