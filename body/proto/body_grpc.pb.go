// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: body.proto

package body

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BodyService_GetBodyById_FullMethodName = "/body.BodyService/GetBodyById"
	BodyService_GetBodys_FullMethodName    = "/body.BodyService/GetBodys"
	BodyService_CreateBody_FullMethodName  = "/body.BodyService/CreateBody"
	BodyService_UpdateBody_FullMethodName  = "/body.BodyService/UpdateBody"
	BodyService_DeleteBody_FullMethodName  = "/body.BodyService/DeleteBody"
)

// BodyServiceClient is the client API for BodyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BodyServiceClient interface {
	GetBodyById(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*GetBodyByIdResponse, error)
	GetBodys(ctx context.Context, in *GetBodysRequest, opts ...grpc.CallOption) (*GetBodysResponse, error)
	CreateBody(ctx context.Context, in *CreateBodyRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	UpdateBody(ctx context.Context, in *UpdateBodyRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	DeleteBody(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
}

type bodyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBodyServiceClient(cc grpc.ClientConnInterface) BodyServiceClient {
	return &bodyServiceClient{cc}
}

func (c *bodyServiceClient) GetBodyById(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*GetBodyByIdResponse, error) {
	out := new(GetBodyByIdResponse)
	err := c.cc.Invoke(ctx, BodyService_GetBodyById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyServiceClient) GetBodys(ctx context.Context, in *GetBodysRequest, opts ...grpc.CallOption) (*GetBodysResponse, error) {
	out := new(GetBodysResponse)
	err := c.cc.Invoke(ctx, BodyService_GetBodys_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyServiceClient) CreateBody(ctx context.Context, in *CreateBodyRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, BodyService_CreateBody_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyServiceClient) UpdateBody(ctx context.Context, in *UpdateBodyRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, BodyService_UpdateBody_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyServiceClient) DeleteBody(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, BodyService_DeleteBody_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BodyServiceServer is the server API for BodyService service.
// All implementations must embed UnimplementedBodyServiceServer
// for forward compatibility
type BodyServiceServer interface {
	GetBodyById(context.Context, *GetByIdRequest) (*GetBodyByIdResponse, error)
	GetBodys(context.Context, *GetBodysRequest) (*GetBodysResponse, error)
	CreateBody(context.Context, *CreateBodyRequest) (*DefaultResponse, error)
	UpdateBody(context.Context, *UpdateBodyRequest) (*DefaultResponse, error)
	DeleteBody(context.Context, *GetByIdRequest) (*DefaultResponse, error)
	// mustEmbedUnimplementedBodyServiceServer()
}

// UnimplementedBodyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBodyServiceServer struct {
}

func (UnimplementedBodyServiceServer) GetBodyById(context.Context, *GetByIdRequest) (*GetBodyByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBodyById not implemented")
}
func (UnimplementedBodyServiceServer) GetBodys(context.Context, *GetBodysRequest) (*GetBodysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBodys not implemented")
}
func (UnimplementedBodyServiceServer) CreateBody(context.Context, *CreateBodyRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBody not implemented")
}
func (UnimplementedBodyServiceServer) UpdateBody(context.Context, *UpdateBodyRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBody not implemented")
}
func (UnimplementedBodyServiceServer) DeleteBody(context.Context, *GetByIdRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBody not implemented")
}

// func (UnimplementedBodyServiceServer) mustEmbedUnimplementedBodyServiceServer() {}

// UnsafeBodyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BodyServiceServer will
// result in compilation errors.
type UnsafeBodyServiceServer interface {
	// mustEmbedUnimplementedBodyServiceServer()
}

func RegisterBodyServiceServer(s grpc.ServiceRegistrar, srv BodyServiceServer) {
	s.RegisterService(&BodyService_ServiceDesc, srv)
}

func _BodyService_GetBodyById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServiceServer).GetBodyById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BodyService_GetBodyById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServiceServer).GetBodyById(ctx, req.(*GetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BodyService_GetBodys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBodysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServiceServer).GetBodys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BodyService_GetBodys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServiceServer).GetBodys(ctx, req.(*GetBodysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BodyService_CreateBody_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServiceServer).CreateBody(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BodyService_CreateBody_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServiceServer).CreateBody(ctx, req.(*CreateBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BodyService_UpdateBody_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServiceServer).UpdateBody(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BodyService_UpdateBody_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServiceServer).UpdateBody(ctx, req.(*UpdateBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BodyService_DeleteBody_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServiceServer).DeleteBody(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BodyService_DeleteBody_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServiceServer).DeleteBody(ctx, req.(*GetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BodyService_ServiceDesc is the grpc.ServiceDesc for BodyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BodyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "body.BodyService",
	HandlerType: (*BodyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBodyById",
			Handler:    _BodyService_GetBodyById_Handler,
		},
		{
			MethodName: "GetBodys",
			Handler:    _BodyService_GetBodys_Handler,
		},
		{
			MethodName: "CreateBody",
			Handler:    _BodyService_CreateBody_Handler,
		},
		{
			MethodName: "UpdateBody",
			Handler:    _BodyService_UpdateBody_Handler,
		},
		{
			MethodName: "DeleteBody",
			Handler:    _BodyService_DeleteBody_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "body.proto",
}
